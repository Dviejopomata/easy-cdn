stages:
  - build
  - test
  - deploy

variables:
  IMAGE_NAME: "${CI_REGISTRY_IMAGE}/cli-${CI_COMMIT_REF_SLUG}"

run-tests:
  tags:
    - bare
  stage: test
  variables:
    CI_CONTAINER_NAME: cdn-server-1
    CI_FOLDER_TEST: /examples/page1
    CI_HOST_TEST: example.org
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker rm ${CI_CONTAINER_NAME} -f || true
    # launch server
    - export CONTAINER_ID=`docker run -P --name ${CI_CONTAINER_NAME} -d ${IMAGE_NAME} serve
        --minioHost="${MINIO_HOST}"
        --minioPort=${MINIO_PORT} 
        --minioAccessKey="${MINIO_ACCESS_KEY} "
        --minioSecretKey="${MINIO_SECRET_KEY}" 
        --minioBucket="zz-ci-test-cdn-${CI_COMMIT_SHA}" 
        --minioSsl=${MINIO_SSL}`
    - export STATIC_FILE_SERVER=`docker port ${CONTAINER_ID} 3000`
    - export MGMT_FILE_SERVER=`docker port ${CONTAINER_ID} 13000`
    # upload website
    - docker run -v `pwd`${CI_FOLDER_TEST}:/page --rm --network=host ${IMAGE_NAME}  upload --mgmtUrl "http://${MGMT_FILE_SERVER}" -d /page --host ${CI_HOST_TEST}
    # get html
    - curl -H "Host:${CI_HOST_TEST}" "http://${STATIC_FILE_SERVER}" > output.html
    # if files are not the same, then fail
    - diff output.html examples/page1/index.html  | wc -l || exit 1
    # cleanup
    - docker rm $CONTAINER_ID -f
build-cli:
  tags:
    - bare
  stage: build  
  script:
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  - docker build -t "${IMAGE_NAME}:${CI_COMMIT_SHA}" -f Dockerfile .
  - docker push "${IMAGE_NAME}:${CI_COMMIT_SHA}"
  - docker tag "${IMAGE_NAME}:${CI_COMMIT_SHA}" "${IMAGE_NAME}:latest"
  - docker push "${IMAGE_NAME}:latest"

deploy-app:
  variables:
    IMAGE_DEPLOY: $CI_REGISTRY/saas2/core:latest
  tags:
    - bare
  only:
    - master
  stage: deploy
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker pull ${IMAGE_DEPLOY}
    - envsubst < ./app.yml > ./app-prod.yml
    - docker run -v `pwd`/app-prod.yml:/app.yml --rm ${IMAGE_DEPLOY} deploy --env=prod --config=/app.yml
  after_script:
    - rm ./app-prod.yml || true
    
deploy-dashboard:
  tags:
  - bare
  variables:
    IMAGE_CDN_CLI: "$CI_REGISTRY/saas2/cdn/cli:latest"
    IMAGE_HAPROXY_CLI: "$CI_REGISTRY/saas2/haproxy-letsencrypt:latest"
    HAPROXY_BACKEND: "http://192.168.1.8:6300"
    CDN_BACKEND: "http://192.168.1.8:7001"
    CDN_STATIC_SERVER: "192.168.1.8:7000"
    APP_HOST: "cdn.nextagilesoft.com"
    CONTAINER_NAME: dashboard-ci
    IMAGE_NAME: dashboard-ci
  script:
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  - cd ui
  - docker build -t ${IMAGE_NAME} .
  - docker container rm ${CONTAINER_NAME} || true
  - docker container create --name ${CONTAINER_NAME} ${IMAGE_NAME}
  - docker cp ${CONTAINER_NAME}:/srv/http ./dist
  - docker container rm ${CONTAINER_NAME}
  - docker run --rm -v `pwd`/dist:/dist ${IMAGE_CDN_CLI}
      upload --host ${APP_HOST} --directory /dist -m ${CDN_BACKEND}
  - docker run --rm ${IMAGE_HAPROXY_CLI} backend add --backend-url=${HAPROXY_BACKEND} --host=${APP_HOST}
    --frontend=https -a=${CDN_STATIC_SERVER}
  stage: deploy